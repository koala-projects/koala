<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.koala.system.repositories.UserRepository">

  <sql id="selectUser">
    select t.id,
           t.username,
           t.nickname,
           t.avatar,
           t.email,
           t.mobile,
           t.remark,
           t.sort_index,
           t.is_enabled,
           t.is_systemic,
           t.is_deleted,
           t.created_by,
           t.created_time,
           t.last_modified_by,
           t.last_modified_time,
           t.deleted_by,
           t.deleted_time
    from k_user t
  </sql>

  <sql id="orderBy">
    <choose>
      <when test="orders != null and orders.size() > 0">
        <foreach collection="orders" item="order" index="index" open=" order by " close="" separator=",">
          <include refid="orderByField"/>
        </foreach>
      </when>
      <otherwise>
        order by t.id asc
      </otherwise>
    </choose>
  </sql>

  <sql id="orderByField">
    <if test="order.property == 'nickname'">
      t.nickname
      <include refid="cn.koala.mybatis.repository.CommonRepository.orderDirection"/>
    </if>
    <if test="order.property == 'createdTime'">
      t.created_time
      <include refid="cn.koala.mybatis.repository.CommonRepository.orderDirection"/>
    </if>
  </sql>

  <select id="list" resultType="cn.koala.system.UserEntity">
    <include refid="selectUser"/>
    <if test="departmentId != null and departmentId != ''">
      left join k_user_department ud on ud.user_id = t.id
    </if>
    <where>
      t.is_deleted = ${@cn.koala.persist.domain.YesNo@NO.value}
      <if test="username != null and username != ''">
        and t.username = #{username}
      </if>
      <if test="usernameLike != null and usernameLike != ''">
        and t.username like concat(#{usernameLike}, '%')
      </if>
      <if test="nickname != null and nickname != ''">
        and t.nickname = #{nickname}
      </if>
      <if test="nicknameLike != null and nicknameLike != ''">
        and t.nickname like concat(#{nicknameLike}, '%')
      </if>
      <if test="departmentId != null and departmentId != ''">
        and ud.department_id = #{departmentId}
      </if>
    </where>
    <include refid="orderBy"/>
  </select>

  <select id="load" resultType="cn.koala.system.UserEntity">
    <include refid="selectUser"/>
    where t.is_deleted = ${@cn.koala.persist.domain.YesNo@NO.value} and t.id = #{id}
  </select>

  <insert id="create" parameterType="cn.koala.system.UserEntity" useGeneratedKeys="true" keyProperty="id">
    insert into k_user(id, username, password, nickname, avatar, email, mobile, remark, sort_index, is_enabled,
                       is_systemic, is_deleted, created_by, created_time)
    values (#{id}, #{username}, #{password}, #{nickname}, #{avatar}, #{email}, #{mobile}, #{remark}, #{sortIndex},
            #{isEnabled}, #{isSystemic}, #{isDeleted}, #{createdBy}, #{createdTime})
  </insert>

  <update id="update" parameterType="cn.koala.system.UserEntity">
    update k_user
    <trim prefix="set" suffixOverrides=",">
      <if test="username != null">username=#{username},</if>
      <if test="nickname != null">nickname=#{nickname},</if>
      <if test="avatar != null">avatar=#{avatar},</if>
      <if test="email != null">email=#{email},</if>
      <if test="mobile != null">mobile=#{mobile},</if>
      <if test="remark != null">remark=#{remark},</if>
      last_modified_by = #{lastModifiedBy},
      last_modified_time = #{lastModifiedTime},
    </trim>
    where is_deleted = ${@cn.koala.persist.domain.YesNo@NO.value} and id=#{id}
  </update>

  <update id="delete" parameterType="cn.koala.system.UserEntity">
    update k_user
    set is_deleted   = ${@cn.koala.persist.domain.YesNo@YES.value},
        deleted_by   = #{deletedBy},
        deleted_time = #{deletedTime}
    where id = #{id}
  </update>

  <select id="findAllRoleIdById" resultType="java.lang.Long">
    select role_id
    from k_user_role
    where user_id = #{id}
  </select>

  <insert id="updateRoleIdById">
    delete from k_user_role where user_id = #{id};
    <if test="!roleIds.isEmpty()">
      insert into k_user_role values
      <foreach item="roleId" index="index" collection="roleIds" separator=",">
        (#{id}, #{roleId})
      </foreach>
    </if>
  </insert>

  <select id="findAllDepartmentIdById" resultType="java.lang.Long">
    select department_id
    from k_user_department
    where user_id = #{id}
  </select>

  <insert id="updateDepartmentIdById">
    delete from k_user_department where user_id = #{id};
    <if test="!departmentIds.isEmpty()">
      insert into k_user_department values
      <foreach item="departmentId" index="index" collection="departmentIds" separator=",">
        (#{id}, #{departmentId})
      </foreach>
    </if>
  </insert>
</mapper>
