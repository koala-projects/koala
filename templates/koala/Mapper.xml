<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="#(package).repository.#(name.pascal.singular)Repository">

  <sql id="select#(name.pascal.singular)">
    select t.id,
#for(property: properties)
		   t.#(property.name.snake.singular)#if(!for.last),#end
#end
    from #(table.name) t
  </sql>
  
  <sql id="orderBy">
    <choose>
      <when test="orders != null and orders.size() > 0">
        <foreach collection="orders" item="order" index="index" open=" order by " close="" separator=",">
          <include refid="orderByField"/>
        </foreach>
      </when>
      <otherwise>
#if(entity.isAbstract)
        order by t.created_time desc
#else
		order by t.id asc
#end
      </otherwise>
    </choose>
  </sql>
  
  <sql id="orderByField">
#for(property: properties)
    <if test="order.property == '#(property.name.camel.singular)'">
        t.#(property.name.snake.singular) <include refid="cn.koala.mybatis.repository.CommonRepository.orderDirection" />
    </if>
#end
  </sql>
  
  <select id="list" resultType="#(package).entity.#(name.pascal.singular)Entity">
    <include refid="select#(name.pascal.singular)"/>
    <where>
#if(entity.isAbstract)
      t.is_deleted = ${@cn.koala.persist.domain.YesNo@NO.value}
#end
#for(property: properties)
      <if test="#(property.name.camel.singular) != null and #(property.name.camel.singular) != ''">
       and t.#(property.name.snake.singular) = #{#(property.name.camel.singular)}
      </if>
#end
    </where>
	<include refid="orderBy"/>
  </select>
  
  <select id="load" resultType="#(package).entity.#(name.pascal.singular)Entity">
    <include refid="select#(name.pascal.singular)"/>
    where#if(entity.isAbstract) t.is_deleted = ${@cn.koala.persist.domain.YesNo@NO.value} and#end  t.id=#{id}
  </select>

  <insert id="create" parameterType="#(package).entity.#(name.pascal.singular)Entity"  useGeneratedKeys="true" keyProperty="id">
    insert into t_biological_information_log
      value (
			 #{id},
#for(property: properties)
			 #{#(property.name.camel.singular)}#if(!for.last),#end
#end
	  )
  </insert>
  
  <update id="update" parameterType="#(package).entity.#(name.pascal.singular)Entity">
    update #(table.name)
    <trim prefix="set" suffixOverrides=",">
#for(property: properties)
      <if test="#(property.name.camel.singular) != null">#(property.name.snake.singular)=#{#(property.name.camel.singular)},</if>
#end
    </trim>
    where#if(entity.isAbstract) is_deleted = ${@cn.koala.persist.domain.YesNo@NO.value} and#end  id = #{id}
  </update>
  
#if(entity.isAbstract)
  <update id="delete" parameterType="#(package).entity.#(name.pascal.singular)Entity">
    update #(table.name)
    set is_deleted   = ${@cn.koala.persist.domain.YesNo@YES.value},
        deleted_by   = #{deletedBy},
        deleted_time = #{deletedTime}
    where id = #{id}
  </update>
#else
  <delete id="delete" parameterType="#(package).entity.#(name.pascal.singular)Entity">
    delete from #(table.name) where id = #{id}
  </delete>
#end
</mapper>
